{
    "docs": [
        {
            "location": "/", 
            "text": "Enterprise in a Box\n\n\nThis project shows a (somewhate) complete enterprise infrastructure.\n\n\nIt will focus on a best practice system architecture which will provide\nexamples of:\n\n\n\n\nConfiguration driven system configuration management\n\n\nHighly available control plane\n\n\nSecurity from the ground up\n\n\n\n\nThis project is meant to be similar in concept as something like the \n\nJava Pet Store\n\nexample application.\n\n\nGuide\n\n\nThe \nGuide\n is a complete step-by-step walkthrough of building the\nenterprise.\n\n\nTools\n\n\nDescription of the tools involved, links back to their home page, and \nuseful information.", 
            "title": "Home"
        }, 
        {
            "location": "/#enterprise-in-a-box", 
            "text": "This project shows a (somewhate) complete enterprise infrastructure.  It will focus on a best practice system architecture which will provide\nexamples of:   Configuration driven system configuration management  Highly available control plane  Security from the ground up   This project is meant to be similar in concept as something like the  Java Pet Store \nexample application.", 
            "title": "Enterprise in a Box"
        }, 
        {
            "location": "/#guide", 
            "text": "The  Guide  is a complete step-by-step walkthrough of building the\nenterprise.", 
            "title": "Guide"
        }, 
        {
            "location": "/#tools", 
            "text": "Description of the tools involved, links back to their home page, and \nuseful information.", 
            "title": "Tools"
        }, 
        {
            "location": "/guide/intro/", 
            "text": "The first step is to configure your development environment.  This project\nwill strive to keep the dependencies you'll need to install to the bare minimum.\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHost\n\n\nYour laptop or workstation\n\n\n\n\n\n\nControl node\n\n\nThe bootstrap node. This will be the system from which you'll use to build and configuration the rest of the nodes.\n\n\n\n\n\n\nOps node\n\n\nThe operations nodes.  These will contain the meta-system nesscary to support the enterprise build system.\n\n\n\n\n\n\nDS node\n\n\nThe data store nodes.  These will contain any persistance storage required by the rest of the enterprise environment.\n\n\n\n\n\n\nApp node\n\n\nThe application nodes.  These will contained the applications development in the entprise environment", 
            "title": "Introduction"
        }, 
        {
            "location": "/guide/macos/", 
            "text": "Currently this guide will be focused on a macOS worksation with the following minimum requirements:\n\n\n\n\nmacOS High Sierra\n\n\n= 16 GB of memory\n\n\n\n\nThe following utilities need to be installed on the \nHost\n.\n\n\nHomebrew\n\n\nThis first step is to install the \nHomebrew\n package \nmanagement system.\n\n\n/usr/bin/ruby -e \n$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n\n\n\n\n\n\n\nNote\n\n\nThis command assume that \nRuby\n programming language, the \ncurl\n \nURL command line client, and the \nMake\n build utilty are installed.\n\n\nThese tools should be installed on the default macOS operating system.\n\n\n\n\nOnce the installation is complete, check the installation.\n\n\nbrew --version\n\n\n\n\nwhich should return something similar to:\n\n\nHomebrew 1.3.8\nHomebrew/homebrew-core (git revision eef61; last commit 2017-12-01)\n\n\n\n\nHomebrew Cask\n\n\nInstall the \nHomebrew Cask\n extention. This enables additional package needed for this guide.\n\n\nbrew tap caskroom/cask\n\n\n\n\nNow that that package management utility is installed, it's time to install the tools necessary to build the rest of the sytem.\n\n\nPacker\n\n\nInstall the \nPacker\n utility. \n\n\nbrew install packer\n\n\n\n\nOnce the installation is complete, check the installation.\n\n\npacker version\n\n\n\n\nwhich should return something similar to:\n\n\nPacker v1.1.2\n\n\n\n\nVirtualBox\n\n\nInstall the \nVirtualBox\n virtualization\nsystem.  This will allow you to provision virtualized guest operating system.\n\n\nAfter installation you can open a terminal and type:\n\n\nbrew cask install virtualbox\n\n\n\n\nOnce the installation is complete, check the installation.\n\n\nvboxmanage --version\n\n\n\n\nwhich should return something similar to:\n\n\n5.2.0r118431\n\n\n\n\nVagrant\n\n\nInstall the \nVagrant\n virtualization managment\nand workflow tools.  This is manage the provisioning of the virtualized guest\nsystems used in this tutorial.\n\n\nAfter installation you can open a terminal and type:\n\n\nbrew cask install vagrant\n\n\n\n\nOnce the installation is complete, check the installation.\n\n\nvagrant version\n\n\n\n\nwhich should return something similar to:\n\n\nInstalled Version: 2.0.1\nLatest Version: 2.0.1\n\n\n\n\nGit\n\n\nInstall the \nGit\n source control utility. \n\n\nbrew install git\n\n\n\n\nOnce the installation is complete, check the installation.\n\n\ngit --version\n\n\n\n\nwhich should return something similar to:\n\n\ngit version 2.15.1", 
            "title": "macOS"
        }, 
        {
            "location": "/guide/macos/#homebrew", 
            "text": "This first step is to install the  Homebrew  package \nmanagement system.  /usr/bin/ruby -e  $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)    Note  This command assume that  Ruby  programming language, the  curl  \nURL command line client, and the  Make  build utilty are installed.  These tools should be installed on the default macOS operating system.   Once the installation is complete, check the installation.  brew --version  which should return something similar to:  Homebrew 1.3.8\nHomebrew/homebrew-core (git revision eef61; last commit 2017-12-01)", 
            "title": "Homebrew"
        }, 
        {
            "location": "/guide/macos/#homebrew-cask", 
            "text": "Install the  Homebrew Cask  extention. This enables additional package needed for this guide.  brew tap caskroom/cask  Now that that package management utility is installed, it's time to install the tools necessary to build the rest of the sytem.", 
            "title": "Homebrew Cask"
        }, 
        {
            "location": "/guide/macos/#packer", 
            "text": "Install the  Packer  utility.   brew install packer  Once the installation is complete, check the installation.  packer version  which should return something similar to:  Packer v1.1.2", 
            "title": "Packer"
        }, 
        {
            "location": "/guide/macos/#virtualbox", 
            "text": "Install the  VirtualBox  virtualization\nsystem.  This will allow you to provision virtualized guest operating system.  After installation you can open a terminal and type:  brew cask install virtualbox  Once the installation is complete, check the installation.  vboxmanage --version  which should return something similar to:  5.2.0r118431", 
            "title": "VirtualBox"
        }, 
        {
            "location": "/guide/macos/#vagrant", 
            "text": "Install the  Vagrant  virtualization managment\nand workflow tools.  This is manage the provisioning of the virtualized guest\nsystems used in this tutorial.  After installation you can open a terminal and type:  brew cask install vagrant  Once the installation is complete, check the installation.  vagrant version  which should return something similar to:  Installed Version: 2.0.1\nLatest Version: 2.0.1", 
            "title": "Vagrant"
        }, 
        {
            "location": "/guide/macos/#git", 
            "text": "Install the  Git  source control utility.   brew install git  Once the installation is complete, check the installation.  git --version  which should return something similar to:  git version 2.15.1", 
            "title": "Git"
        }, 
        {
            "location": "/guide/source/", 
            "text": "Download the source code for this project:\n\n\ngit clone https://github.com/boundedinfinity/eiab.git\n\n\n\n\nThis will create the following directory structure:\n\n\neiab\n\u251c\u2500\u2500 ansible/\n\u251c\u2500\u2500 mkdocs/\n\u251c\u2500\u2500 packer/\n\u251c\u2500\u2500 Brewfile\n\u251c\u2500\u2500 readme.md\n\u251c\u2500\u2500 Makefile \n\u2514\u2500\u2500 Vagrantfile\n\n\n\n\nFor the rest of the guide the \neiab\n directory will be denoted as something like \n$EIAB_DIR\n for\nthe purposes of scripts and examples.", 
            "title": "Project Source"
        }, 
        {
            "location": "/guide/machine-image/", 
            "text": "The build process relies on the \nboxcutter centos\n build configuration project.\n\n\nThe following series of command must be ran from the \n$EIAB_DIR/packer\n:\n\n\ncd $EIAB_DIR/packer\n\n\n\n\nDownload the system by:\n\n\ngit clone https://github.com/boxcutter/centos.git boxcutter-centos\n\n\n\n\nBuild the machine image that will be used for this guide.\n\n\npacker build -only=virtualbox-iso -var-file=../eiab-var.json centos.json\n\n\n\n\nThis step may take quite a while to finish.  It should end with something similar to the following:\n\n\nBuild 'virtualbox-iso' finished.\n\n==\n Builds finished. The artifacts of successful builds are:\n--\n virtualbox-iso: 'virtualbox' provider box: box/virtualbox/centos7-0.0.99.box\n\n\n\n\nThis will perform the following:\n\n\n\n\nDownload the and verify the \nCentOS\n ISO and verify the image against the configure checksum\n\n\nCreates a \nVirtualBox\n image using the \nVirtualBox Builder\n\n\nCreate a local \nkickstart\n environment, and perform the OS installation\n\n\nProvision the necessary \nVirtualBox\n configuration\n\n\nConverts the image to a \nVagrant Box\n using the \nVagrant Post-Processor\n \n\n\n\n\nImport the box into the local \nVagrant\n cache:\n\n\nvagrant box add --name bi/eiab boxcutter-centos/box/virtualbox/centos-7.4.box\n\n\n\n\nNext list the boxes.\n\n\nvagrant box list\n\n\n\n\nYou should see a line similar to the following:\n\n\n...\n...\nbi/eiab                                 (virtualbox, 0)\n...\n...", 
            "title": "Machine Image"
        }, 
        {
            "location": "/guide/vagrant/", 
            "text": "Install the \nvagrant-hostmanager\n plugin.\n\n\nvagrant plugin install vagrant-hostmanager\n\n\n\n\nThe following series of command must be ran from the \n$EIAB_DIR\n:\n\n\ncd $EIAB_DIR\n\n\n\n\nNow it's time to start up the nodes:\n\n\nvagrant up\n\n\n\n\n\n\nNote\n\n\nThis may take serveral minutes to complete.", 
            "title": "Virtual Machines"
        }, 
        {
            "location": "/guide/control-node/", 
            "text": "The following series of command must be ran from the \n$EIAB_DIR\n:\n\n\ncd $EIAB_DIR\n\n\n\n\nLog into the \ncontrol\n node.\n\n\nvagrant ssh control\n\n\n\n\nOnce inside the VM, the following series of command must be ran from the \n/vagrant\n:\n\n\nThen type:\n\n\ncd /vagrant\n\n\n\n\nOnce inside the \n/vagrant\n directory perform a directory listing. You should see something similar \nto the following:\n\n\nls -l \ndrwxr-xr-x.  1 vagrant vagrant  544 Dec  2 05:33 .\ndr-xr-xr-x. 18 root    root     239 Dec  2 05:27 ..\ndrwxr-xr-x.  1 vagrant vagrant  408 Aug 29 23:02 ansible\n-rw-r--r--.  1 vagrant vagrant  175 Dec  2 05:29 Brewfile\n-rw-r--r--.  1 vagrant vagrant  133 Aug 19 07:25 .editorconfig\ndrwxr-xr-x.  1 vagrant vagrant  510 Dec  2 01:07 .git\n-rw-r--r--.  1 vagrant vagrant   29 Aug 25 19:11 .gitignore\n-rw-r--r--.  1 vagrant vagrant 2621 Sep  2 06:29 Makefile\ndrwxr-xr-x.  1 vagrant vagrant  238 Nov 25 00:20 mkdocs\ndrwxr-xr-x.  1 vagrant vagrant  204 Dec  2 01:12 packer\n-rw-r--r--.  1 vagrant vagrant 2505 Jul 28 23:44 readme.md\n-rw-r--r--.  1 vagrant vagrant  346 Aug 19 05:53 research.md\n-rw-r--r--.  1 vagrant vagrant 2440 Aug 19 05:53 services.md\n-rw-r--r--.  1 vagrant vagrant  352 Aug 20 10:58 temp.md\ndrwxr-xr-x.  1 vagrant vagrant  102 Aug 19 06:17 .vagrant\n-rw-r--r--.  1 vagrant vagrant 1323 Dec  2 05:26 Vagrantfile\n\n\n\n\nThe content may not exactly match the example above, but the important thing is that\nyou should see the project files.\n\n\nThe following series of command must be ran from the \n/vagrant/ansible\n directory:\n\n\ncd /vagrant/ansible\n\n\n\n\nClock\n\n\nConfigure the clock via the \nNetwork Time Protocol\n.  This will fix \nclock skew errors.\n\n\nmake control-node-ntp\n\n\n\n\nAnsible roles\n\n\nInstall any required third party roles from \nAnsible Galaxy\n.\n\n\nmake control-node-roles\n\n\n\n\n\n\nWarning\n\n\nForgot what this is for.\n\n\n\n\nUserShellD\n\n\nInstall the \nUserShellD\n framework.\n\n\nmake control-node-usershelld\n\n\n\n\nThis framework provides a linux style \n.d\n directories that helps with development work\nand automation tasks.\n\n\nSSH\n\n\nConfigure the \nSSH\n utilities.\n\n\nmake control-node-ssh\n\n\n\n\nThis will:\n\n\n\n\nInstall a \nssh-agent\n lifecycle management scripts.\n\n\nGenerate the ssh keypair with the \nThere and back again!\n as the passphrase\n\n\nImport the remote host finger prints from all the nodes in the architecture\n\n\n\n\n\n\nNote\n\n\nTo properly enable the SSH agent functionality, log out of the control node\nand log back in.\n\n\n\n\nThen you'll need to add your generated key to the cache:\n\n\nssh-add ~/.ssh/id_rsa\n# Enter the passphrase from above\n\n\n\n\n\n\nNote\n\n\nYou'll need repeat this step if the agent is restarted\n\n\n\n\nYou can check the key by:\n\n\n# for private keys\nssh-add -l\n# for public keys\nssh-add -L\n\n\n\n\nGPG\n\n\nInstall the \nGnu Privacy Guard\n (GPG) utilities, and a few other packages \nrequired for this guide.\n\n\nmake control-node-gpg\n\n\n\n\nAfter installation you can open a terminal and type:\n\n\ngpg --version\n\n\n\n\n\n\nNote\n\n\nTo properly enable the GnuPG agent functionality, log out of the control node\nand log back in.\n\n\n\n\nYou should see something similar to the following.\n\n\ngpg (GnuPG) 2.0.22\nlibgcrypt 1.5.3\n...\n...\n...\n\n\n\n\nHelp generate some random entropy for key generation.  \n\n\n\n\nNote\n\n\nThis step is mainly required to generate entropy while running inside a VM.  This shouldn't \nbe necessary when running on a physical computer.\n\n\n\n\nsudo rngd -r /dev/urandom\n\n\n\n\nThen generate a key:\n\n\ngpg --gen-key\n\n\n\n\nUsing the following parameters:\n\n\n\n\nKey type: \n1\n for the \nRSA and RSA (default)\n option\n\n\nKey length: \n4096\n\n\nExpire Date: \n0\n for the \nkey does not expire\n option\n\n\nIs this correct?: \ny\n\n\nReal name: \nBilbo Baggins\n\n\nEmail: \nbilbo@shire.vil\n\n\nComment: \nenter\n (leave blank)\n\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?: \no\n for the \n(O)kay\n option\n\n\nPassphrase: \nThere and back again!\n\n\n\n\nAfter the key generation is complete, view the key:\n\n\ngpg --list-keys\n# or\ngpg -k\n\n\n\n\nwhich should display something similar to the following:\n\n\n/home/vagrant/.gnupg/pubring.gpg\n--------------------------------\npub   4096R/C00B50B8 2017-12-02\nuid                  Bilbo Baggins \nbilbo@shire.vil\n\nsub   4096R/45FB4738 2017-12-02", 
            "title": "Control node"
        }, 
        {
            "location": "/guide/control-node/#clock", 
            "text": "Configure the clock via the  Network Time Protocol .  This will fix \nclock skew errors.  make control-node-ntp", 
            "title": "Clock"
        }, 
        {
            "location": "/guide/control-node/#ansible-roles", 
            "text": "Install any required third party roles from  Ansible Galaxy .  make control-node-roles   Warning  Forgot what this is for.", 
            "title": "Ansible roles"
        }, 
        {
            "location": "/guide/control-node/#usershelld", 
            "text": "Install the  UserShellD  framework.  make control-node-usershelld  This framework provides a linux style  .d  directories that helps with development work\nand automation tasks.", 
            "title": "UserShellD"
        }, 
        {
            "location": "/guide/control-node/#ssh", 
            "text": "Configure the  SSH  utilities.  make control-node-ssh  This will:   Install a  ssh-agent  lifecycle management scripts.  Generate the ssh keypair with the  There and back again!  as the passphrase  Import the remote host finger prints from all the nodes in the architecture    Note  To properly enable the SSH agent functionality, log out of the control node\nand log back in.   Then you'll need to add your generated key to the cache:  ssh-add ~/.ssh/id_rsa\n# Enter the passphrase from above   Note  You'll need repeat this step if the agent is restarted   You can check the key by:  # for private keys\nssh-add -l\n# for public keys\nssh-add -L", 
            "title": "SSH"
        }, 
        {
            "location": "/guide/control-node/#gpg", 
            "text": "Install the  Gnu Privacy Guard  (GPG) utilities, and a few other packages \nrequired for this guide.  make control-node-gpg  After installation you can open a terminal and type:  gpg --version   Note  To properly enable the GnuPG agent functionality, log out of the control node\nand log back in.   You should see something similar to the following.  gpg (GnuPG) 2.0.22\nlibgcrypt 1.5.3\n...\n...\n...  Help generate some random entropy for key generation.     Note  This step is mainly required to generate entropy while running inside a VM.  This shouldn't \nbe necessary when running on a physical computer.   sudo rngd -r /dev/urandom  Then generate a key:  gpg --gen-key  Using the following parameters:   Key type:  1  for the  RSA and RSA (default)  option  Key length:  4096  Expire Date:  0  for the  key does not expire  option  Is this correct?:  y  Real name:  Bilbo Baggins  Email:  bilbo@shire.vil  Comment:  enter  (leave blank)  Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?:  o  for the  (O)kay  option  Passphrase:  There and back again!   After the key generation is complete, view the key:  gpg --list-keys\n# or\ngpg -k  which should display something similar to the following:  /home/vagrant/.gnupg/pubring.gpg\n--------------------------------\npub   4096R/C00B50B8 2017-12-02\nuid                  Bilbo Baggins  bilbo@shire.vil \nsub   4096R/45FB4738 2017-12-02", 
            "title": "GPG"
        }, 
        {
            "location": "/guide/ansible/", 
            "text": "Create an \nansible\n user that will be used for the automation of the infrastructure.\n\n\nmake ansible\n\n\n\n\nThis will:\n\n\n\n\nEnsure an ansible user is exist on all nodes\n\n\nConfigure this user with \nsudo\n privileges\n\n\nRegister your SSH public key for the ansible user on all nodes (the keys created during the \n    \nSSH\n steps)\n\n\n\n\n\n\nNote\n\n\nIn a real production environment you should probably remove the default cloud instance account.\n\n\n\n\n\n\nNote\n\n\nThis playbook to perform this uses the \nbootstrap\n inventory group.  This group is configured to use ssh via username/password (in the \ngroup_vars/bootstrap.yml\n configuration file) to configure the ssh passwordless log in.", 
            "title": "Ansible"
        }, 
        {
            "location": "/guide/all-nodes/", 
            "text": "Common Configuration for all nodes\n\n\nClock\n\n\nConfigure the clock via the \nNetwork Time Protocol\n.  This will fix \nclock skew errors.\n\n\nmake all-nodes-ntp\n\n\n\n\n\n\nNote\n\n\nTODO: Internal NTP master\n\n\n\n\nCommon utilities\n\n\nInstall a number of helpful utilities\n\n\nmake all-nodes-utilities", 
            "title": "All nodes"
        }, 
        {
            "location": "/guide/all-nodes/#clock", 
            "text": "Configure the clock via the  Network Time Protocol .  This will fix \nclock skew errors.  make all-nodes-ntp   Note  TODO: Internal NTP master", 
            "title": "Clock"
        }, 
        {
            "location": "/guide/all-nodes/#common-utilities", 
            "text": "Install a number of helpful utilities  make all-nodes-utilities", 
            "title": "Common utilities"
        }, 
        {
            "location": "/guide/consul/", 
            "text": "Consul provisioning\n\n\nConfigure a \nConsul\n cluster.  The cluster is broken down to the \nserver\n\nnodes and the \nclient\n or \nagent\n nodes.\n\n\n\n\nTodo\n\n\nConfigure web UI\n\n\nConfigure SSL\n\n\n\n\n\n\n\n\nServer\n\n\nCreate the 3 node \nconsul\n server ring.  This provisions 3 \nconsul\n agents in server mode \non the 3 \nops\n nodes.\n\n\nmake consul-server\n\n\n\n\nTo verify the cluster log into one of the ops nodes and list the \nconsul\n cluster members.\n\n\nvagrant ssh ops00\nconsul members\n\n\n\n\nThe output should be similar to the following:\n\n\nNode   Address         Status  Type    Build  Protocol  DC\nops00  10.0.0.10:8301  alive   server  0.9.2  2         dc1\nops01  10.0.0.11:8301  alive   server  0.9.2  2         dc1\nops02  10.0.0.12:8301  alive   server  0.9.2  2         dc1\n\n\n\n\nClient\n\n\nProvision \nconsul\n clients on all other nodes (including the control node).\n\n\nmake consul-client\n\n\n\n\nTo verify the cluster log into one of the ops nodes and list the \nconsul\n cluster members.\n\n\nconsul members\n\n\n\n\nThe output should be similar to the following:\n\n\nNode   Address         Status  Type    Build  Protocol  DC\napp00  10.0.0.20:8301  alive   client  0.9.2  2         dc1\napp01  10.0.0.21:8301  alive   client  0.9.2  2         dc1\napp02  10.0.0.22:8301  alive   client  0.9.2  2         dc1\nds00   10.0.0.30:8301  alive   client  0.9.2  2         dc1\nds01   10.0.0.31:8301  alive   client  0.9.2  2         dc1\nds02   10.0.0.32:8301  alive   client  0.9.2  2         dc1\nops00  10.0.0.10:8301  alive   server  0.9.2  2         dc1\nops01  10.0.0.11:8301  alive   server  0.9.2  2         dc1\nops02  10.0.0.12:8301  alive   server  0.9.2  2         dc1\n\n\n\n\nVerify DNS queries are working.\n\n\ndig @127.0.0.1 -p 8600 ops00.node.consul. ANY\n\n\n\n\nThe output should contain an \nANSWER SECTION\n with output similar to the following:\n\n\n;; ANSWER SECTION:\nops00.node.consul.  0   IN  A   10.0.0.10\n\n\n\n\nThis also configures a local DNS resolver to query consul first in the DNS query \nchain. \n\n\ndig ops00.node.consul\n\n\n\n\nThe output should contain an \nANSWER SECTION\n with output similar to the following:\n\n\n;; ANSWER SECTION:\nops00.node.consul.  0   IN  A   10.0.0.10\n\n\n\n\n\n\nNote\n\n\nTo properly enable the Consul global variables.", 
            "title": "Consul"
        }, 
        {
            "location": "/guide/consul/#consul-provisioning", 
            "text": "Configure a  Consul  cluster.  The cluster is broken down to the  server \nnodes and the  client  or  agent  nodes.   Todo  Configure web UI  Configure SSL", 
            "title": "Consul provisioning"
        }, 
        {
            "location": "/guide/consul/#server", 
            "text": "Create the 3 node  consul  server ring.  This provisions 3  consul  agents in server mode \non the 3  ops  nodes.  make consul-server  To verify the cluster log into one of the ops nodes and list the  consul  cluster members.  vagrant ssh ops00\nconsul members  The output should be similar to the following:  Node   Address         Status  Type    Build  Protocol  DC\nops00  10.0.0.10:8301  alive   server  0.9.2  2         dc1\nops01  10.0.0.11:8301  alive   server  0.9.2  2         dc1\nops02  10.0.0.12:8301  alive   server  0.9.2  2         dc1", 
            "title": "Server"
        }, 
        {
            "location": "/guide/consul/#client", 
            "text": "Provision  consul  clients on all other nodes (including the control node).  make consul-client  To verify the cluster log into one of the ops nodes and list the  consul  cluster members.  consul members  The output should be similar to the following:  Node   Address         Status  Type    Build  Protocol  DC\napp00  10.0.0.20:8301  alive   client  0.9.2  2         dc1\napp01  10.0.0.21:8301  alive   client  0.9.2  2         dc1\napp02  10.0.0.22:8301  alive   client  0.9.2  2         dc1\nds00   10.0.0.30:8301  alive   client  0.9.2  2         dc1\nds01   10.0.0.31:8301  alive   client  0.9.2  2         dc1\nds02   10.0.0.32:8301  alive   client  0.9.2  2         dc1\nops00  10.0.0.10:8301  alive   server  0.9.2  2         dc1\nops01  10.0.0.11:8301  alive   server  0.9.2  2         dc1\nops02  10.0.0.12:8301  alive   server  0.9.2  2         dc1  Verify DNS queries are working.  dig @127.0.0.1 -p 8600 ops00.node.consul. ANY  The output should contain an  ANSWER SECTION  with output similar to the following:  ;; ANSWER SECTION:\nops00.node.consul.  0   IN  A   10.0.0.10  This also configures a local DNS resolver to query consul first in the DNS query \nchain.   dig ops00.node.consul  The output should contain an  ANSWER SECTION  with output similar to the following:  ;; ANSWER SECTION:\nops00.node.consul.  0   IN  A   10.0.0.10   Note  To properly enable the Consul global variables.", 
            "title": "Client"
        }, 
        {
            "location": "/guide/vault/", 
            "text": "Configure a \nVault\n cluster.\n\n\n\n\nTodo\n\n\n\n\nConfigure HA\n\n\nConfigure SSL\n\n\n\n\n\n\nServer\n\n\nProvision the \nvault\n server configured to use the \nconsul\n cluster as the backing store.\n\n\nmake vault-server\n\n\n\n\nUse \nconsul\n to discover the location of the \nvault\n server:\n\n\nhttp -b $CONSUL_ADDR/v1/catalog/service/vault | jq -r '.[0].Address'\n\n\n\n\n\n\nNote\n\n\nThe \n$CONSUL_ADDR\n variable was created as a part of this tutorial, and is not a \npart of the \nconsul\n installation.\n\n\n\n\nThe output should be something similar to the following:\n\n\n10.0.0.10\n\n\n\n\n\n\nNote\n\n\nUse the ansible \ninventory.ini\n file to verify the name of this server.\nFor this demo is should be the \nops00\n server.\n\n\n\n\nIn a separate terminal log into the vault server and check the status.\n\n\nvagrant ssh ops00\nvault status\n\n\n\n\nThe output should be something similar to the following:\n\n\nError checking seal status: Error making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/seal-status\nCode: 400. Errors:\n\n* server is not yet initialized\n\n\n\n\nInitialize the vault server:\n\n\nvault init\n\n\n\n\nyou should seem something similar to the following:\n\n\nUnseal Key 1: QdrzwsZb4p92a4t9y+78mhrMniS2kmILdEqbDOPocxdf\nUnseal Key 2: 8SwZu0pexmTzR7PpN9oSIGqMlKMRUFFlqNEZs6Cv6Rew\nUnseal Key 3: bgX0HBdqAJY4gWWfGBm0jOqpigFtQf1uNawpQbsVWjWb\nUnseal Key 4: 0xqKSMPoXNRwe6YAo+etJ6dhgMEMICwW9vBEF/eyZi1F\nUnseal Key 5: TiN7vItPO/18ovDWVdDbgEakLnru+3EuewYx5gb64eBM\nInitial Root Token: 4538885a-92ea-5870-8ee0-cfc33cb2e44f\n\n\n\n\nNext you'll need to store these keys in a secure fashion:\n\n\npass init bilbo@shire.vil\n\n\n\n\nwhich is the name of the GPG key, then you save these in a secure fashion:\n\n\npass vault/root-token\n# enter the Initial Root Token value\npass insert vault/unseal-1\n# enter the Unseal Key 1 value\n\n\n\n\nThen repeat this process for the rest of these unseal keys.\n\n\nYou can now access these keys:\n\n\npass vault/unseal-3\nbgX0HBdqAJY4gWWfGBm0jOqpigFtQf1uNawpQbsVWjWb\n\n\n\n\nNow if you check the state:\n\n\nvagrant ssh ops00\nvault status\n\n\n\n\nYou should see something similar to the following:\n\n\nType: shamir\nSealed: true\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\nVersion: 0.9.0\n\nHigh-Availability Enabled: true\n    Mode: sealed\n\n\n\n\nTo unseal the vault run the following:\n\n\nvault unseal\n\n\n\n\nExtract the key vaules using the \npass\n command frmo above, and repeat three times.\nOn the 3rd run, the output should be similar to the following:\n\n\nSealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\n\n\n\n\nNote the the \nSealed\n line is \nfalse\n.  Then check the status of the vault cluster once more:\n\n\nvault status\n\n\n\n\nwhich should produce output similar to the following:\n\n\nSealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\n[ansible@ops00 ~]$ vault status\nType: shamir\nSealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\nVersion: 0.9.0\nCluster Name: vault-cluster-8f1d1c07\nCluster ID: c25d0d40-70b8-1fed-decb-a2e9b88e2104\n\nHigh-Availability Enabled: true\n    Mode: active\n    Leader Cluster Address: https://10.0.0.10:8201\n\n\n\n\nThe next step is to authentication your session with the server:\n\n\npass vault/root-token\n# copy the token\nvault auth\n# enter the token\n\n\n\n\nAfter you enter the value of the \nInitial Root Token\n, which should produce \noutput similar to the following:\n\n\nSuccessfully authenticated! You are now logged in.\ntoken: 4538885a-92ea-5870-8ee0-cfc33cb2e44f\ntoken_duration: 0\ntoken_policies: [root]\n\n\n\n\nTo test the server, try adding your first secret:\n\n\nvault write secret/hello value=world\n\n\n\n\nwhich should produce output similar to the following:\n\n\nSuccess! Data written to: secret/hello\n\n\n\n\nThen read the secret:\n\n\nvault read secret/hello\n\n\n\n\nwhich should produce output similar to the following:\n\n\nKey                 Value\n---                 -----\nrefresh_interval    768h0m0s\nvalue               world\n\n\n\n\nNow you need to configure the rest of the vault servers:\n\n\nmake vault-client\n\n\n\n\nConfigure authentication:\n\n\nvault auth-enable userpass\n#vault write sys/auth/userpass type=userpass\n\n# check\nvault auth -methods\n\npass generate vault/vagrant 15 --no-symbols\n# copy the password\nvault write auth/userpass/users/vagrant password=qYgee4TyjONBxX9 policies=admins\n\n# log in with the user/pass\nvault auth -method=userpass username=vagrant password=qYgee4TyjONBxX9\n# copy the token for the vagrant user\n\n# now logged in as vagrant\nvault read secret/hello\n# should get permission denied\n\n\nvault write secret/vagrant value=it-worked", 
            "title": "Vault"
        }, 
        {
            "location": "/guide/vault/#server", 
            "text": "Provision the  vault  server configured to use the  consul  cluster as the backing store.  make vault-server  Use  consul  to discover the location of the  vault  server:  http -b $CONSUL_ADDR/v1/catalog/service/vault | jq -r '.[0].Address'   Note  The  $CONSUL_ADDR  variable was created as a part of this tutorial, and is not a \npart of the  consul  installation.   The output should be something similar to the following:  10.0.0.10   Note  Use the ansible  inventory.ini  file to verify the name of this server.\nFor this demo is should be the  ops00  server.   In a separate terminal log into the vault server and check the status.  vagrant ssh ops00\nvault status  The output should be something similar to the following:  Error checking seal status: Error making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/seal-status\nCode: 400. Errors:\n\n* server is not yet initialized  Initialize the vault server:  vault init  you should seem something similar to the following:  Unseal Key 1: QdrzwsZb4p92a4t9y+78mhrMniS2kmILdEqbDOPocxdf\nUnseal Key 2: 8SwZu0pexmTzR7PpN9oSIGqMlKMRUFFlqNEZs6Cv6Rew\nUnseal Key 3: bgX0HBdqAJY4gWWfGBm0jOqpigFtQf1uNawpQbsVWjWb\nUnseal Key 4: 0xqKSMPoXNRwe6YAo+etJ6dhgMEMICwW9vBEF/eyZi1F\nUnseal Key 5: TiN7vItPO/18ovDWVdDbgEakLnru+3EuewYx5gb64eBM\nInitial Root Token: 4538885a-92ea-5870-8ee0-cfc33cb2e44f  Next you'll need to store these keys in a secure fashion:  pass init bilbo@shire.vil  which is the name of the GPG key, then you save these in a secure fashion:  pass vault/root-token\n# enter the Initial Root Token value\npass insert vault/unseal-1\n# enter the Unseal Key 1 value  Then repeat this process for the rest of these unseal keys.  You can now access these keys:  pass vault/unseal-3\nbgX0HBdqAJY4gWWfGBm0jOqpigFtQf1uNawpQbsVWjWb  Now if you check the state:  vagrant ssh ops00\nvault status  You should see something similar to the following:  Type: shamir\nSealed: true\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\nVersion: 0.9.0\n\nHigh-Availability Enabled: true\n    Mode: sealed  To unseal the vault run the following:  vault unseal  Extract the key vaules using the  pass  command frmo above, and repeat three times.\nOn the 3rd run, the output should be similar to the following:  Sealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:  Note the the  Sealed  line is  false .  Then check the status of the vault cluster once more:  vault status  which should produce output similar to the following:  Sealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\n[ansible@ops00 ~]$ vault status\nType: shamir\nSealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\nVersion: 0.9.0\nCluster Name: vault-cluster-8f1d1c07\nCluster ID: c25d0d40-70b8-1fed-decb-a2e9b88e2104\n\nHigh-Availability Enabled: true\n    Mode: active\n    Leader Cluster Address: https://10.0.0.10:8201  The next step is to authentication your session with the server:  pass vault/root-token\n# copy the token\nvault auth\n# enter the token  After you enter the value of the  Initial Root Token , which should produce \noutput similar to the following:  Successfully authenticated! You are now logged in.\ntoken: 4538885a-92ea-5870-8ee0-cfc33cb2e44f\ntoken_duration: 0\ntoken_policies: [root]  To test the server, try adding your first secret:  vault write secret/hello value=world  which should produce output similar to the following:  Success! Data written to: secret/hello  Then read the secret:  vault read secret/hello  which should produce output similar to the following:  Key                 Value\n---                 -----\nrefresh_interval    768h0m0s\nvalue               world  Now you need to configure the rest of the vault servers:  make vault-client  Configure authentication:  vault auth-enable userpass\n#vault write sys/auth/userpass type=userpass\n\n# check\nvault auth -methods\n\npass generate vault/vagrant 15 --no-symbols\n# copy the password\nvault write auth/userpass/users/vagrant password=qYgee4TyjONBxX9 policies=admins\n\n# log in with the user/pass\nvault auth -method=userpass username=vagrant password=qYgee4TyjONBxX9\n# copy the token for the vagrant user\n\n# now logged in as vagrant\nvault read secret/hello\n# should get permission denied\n\n\nvault write secret/vagrant value=it-worked", 
            "title": "Server"
        }, 
        {
            "location": "/tools/ansible/", 
            "text": "Ansible\n a configuration management system.\n\n\n\n\nNote\n\n\nGuide version: \n2.4.1.0\n\n\n\n\nGet the version\n\n\nansible --version\n\n\n\n\nCreate a roles directory\n\n\nansible-galaxy init \nnamespace\n.\nrole name\n\n\n\n\n\nReference\n\n\n\n\nProject page\n\n\nModule Index\n\n\nConfiguration file : role_path\n\n\nAnsilbe Galaxy\n\n\nConfiguration file: role_path\n\n\n\n\n\n\n\n\n\n\nCustom Ansible Module Hello World", 
            "title": "Ansible"
        }, 
        {
            "location": "/tools/ansible/#get-the-version", 
            "text": "ansible --version", 
            "title": "Get the version"
        }, 
        {
            "location": "/tools/ansible/#create-a-roles-directory", 
            "text": "ansible-galaxy init  namespace . role name", 
            "title": "Create a roles directory"
        }, 
        {
            "location": "/tools/ansible/#reference", 
            "text": "Project page  Module Index  Configuration file : role_path  Ansilbe Galaxy  Configuration file: role_path      Custom Ansible Module Hello World", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/atom/", 
            "text": "", 
            "title": "Atom"
        }, 
        {
            "location": "/tools/consul/", 
            "text": "Consul\n a service discovery and monitoring system.\n\n\nCheck system service status\n\n\nsystemctl status consul\n\n\n\n\nRestart system service\n\n\nsystemctl restart consul\n\n\n\n\nList services\n\n\nhttp $CONSUL_ADDR/v1/catalog/services\n\n\n\n\nDetails of a service\n\n\nhttp $CONSUL_ADDR/v1/catalog/service/\nservice name\n\n\n\n\n\nDeregister a service\n\n\nhttp PUT $CONSUL_ADDR/v1/agent/service/deregister/\nservice ID\n\n\n\n\n\nand if that doesn't work:\n\n\nhttp $CONSUL_ADDR/v1/catalog/service/\nservice name | jq --compact-output '.[] | {Datacenter:.Datacenter, Node:.Node,ServiceID:.ServiceID}'\n\necho '{\nDatacenter\n:\ndc1\n,\nNode\n:\nservice.node.address\n,\nServiceID\n:\n4e266b3b-b201-49f9-9bd5-e0e7262324d8:10005\n}' | http PUT $CONSUL_ADDR/v1/catalog/deregister\n\n\n\n\nDNS service query (A record)\n\n\ndig \nservice name\n.service.consul\n\n\n\n\nDNS service query (SRV record)\n\n\ndig \nservice name\n.service.consul SRV\n\n\n\n\nDNS service query with tag (A record)\n\n\ndig dev.cassandra.service.consul", 
            "title": "Consul"
        }, 
        {
            "location": "/tools/consul/#check-system-service-status", 
            "text": "systemctl status consul", 
            "title": "Check system service status"
        }, 
        {
            "location": "/tools/consul/#restart-system-service", 
            "text": "systemctl restart consul", 
            "title": "Restart system service"
        }, 
        {
            "location": "/tools/consul/#list-services", 
            "text": "http $CONSUL_ADDR/v1/catalog/services", 
            "title": "List services"
        }, 
        {
            "location": "/tools/consul/#details-of-a-service", 
            "text": "http $CONSUL_ADDR/v1/catalog/service/ service name", 
            "title": "Details of a service"
        }, 
        {
            "location": "/tools/consul/#deregister-a-service", 
            "text": "http PUT $CONSUL_ADDR/v1/agent/service/deregister/ service ID   and if that doesn't work:  http $CONSUL_ADDR/v1/catalog/service/ service name | jq --compact-output '.[] | {Datacenter:.Datacenter, Node:.Node,ServiceID:.ServiceID}'\n\necho '{ Datacenter : dc1 , Node : service.node.address , ServiceID : 4e266b3b-b201-49f9-9bd5-e0e7262324d8:10005 }' | http PUT $CONSUL_ADDR/v1/catalog/deregister", 
            "title": "Deregister a service"
        }, 
        {
            "location": "/tools/consul/#dns-service-query-a-record", 
            "text": "dig  service name .service.consul", 
            "title": "DNS service query (A record)"
        }, 
        {
            "location": "/tools/consul/#dns-service-query-srv-record", 
            "text": "dig  service name .service.consul SRV", 
            "title": "DNS service query (SRV record)"
        }, 
        {
            "location": "/tools/consul/#dns-service-query-with-tag-a-record", 
            "text": "dig dev.cassandra.service.consul", 
            "title": "DNS service query with tag (A record)"
        }, 
        {
            "location": "/tools/curl/", 
            "text": "curl\n is a command line utility to interact with URLs.\n\n\n\n\nNote\n\n\nGuide version: \n7.54.0\n\n\n\n\nGet the version\n\n\ncurl --version\n\n\n\n\nReference\n\n\n\n\nProject page", 
            "title": "curl"
        }, 
        {
            "location": "/tools/curl/#get-the-version", 
            "text": "curl --version", 
            "title": "Get the version"
        }, 
        {
            "location": "/tools/curl/#reference", 
            "text": "Project page", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/docker/", 
            "text": "Docker\n\n\n\n\nContainer platform and management tool.\n\n\nhttps://www.docker.com", 
            "title": "Docker"
        }, 
        {
            "location": "/tools/git/", 
            "text": "Git\n is a source control management tool.\n\n\n\n\nNote\n\n\nGuide version: \n2.15.1\n\n\n\n\nGet the version\n\n\ngit --version\n\n\n\n\nReference\n\n\n\n\nProject page", 
            "title": "Git"
        }, 
        {
            "location": "/tools/git/#get-the-version", 
            "text": "git --version", 
            "title": "Get the version"
        }, 
        {
            "location": "/tools/git/#reference", 
            "text": "Project page", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/gpg/", 
            "text": "Gnu Privacy Guard\n (GPG) is a encryption utility.\n\n\n\n\nNote\n\n\nGuide version: \n2.0.22\n\n\n\n\nCheck the version\n\n\ngpg --version\n\n\n\n\nGenerate a key\n\n\ngpg --gen-key\n\n\n\n\nList public keys\n\n\ngpg -k\n# or \ngpg --list-keys\n# or\ngpg --list-keys --with-colons\n\n\n\n\nList secret keys\n\n\ngpg -K\n# or \ngpg --list-secret-keys\n\n\n\n\nExport a key in ASCII format\n\n\ngpg --export \nkey ID\n | base64\n# e.g.:\ngpg --export bilbo@shire.vil | base64\n\n\n\n\nRun the agent\n\n\ngpg-agent --daemon\n\n\n\n\nKill the agent\n\n\npkill gpg-agent\n\n\n\n\nEncrypt a file\n\n\ngpg --recipient \nkey ID\n --output \noutput file\n --encrypt \ninput file\n\n# e.g.:\ngpg --recipient bilbo@shire.vil --output output.txt.gpg --encrypt input.txt \n\n\n\n\nDecrypt a file\n\n\ngpg --output \noutput file\n --decrypt \ninput file\n\n# e.g.:\ngpg --output output.txt --decrypt input.txt.gpg\n\n\n\n\nReference\n\n\n\n\nProject Page\n\n\nInvoking GPG-AGENT\n\n\nUnattended key generation\n\n\n\n\n\n\nRng-tools\n\n\nArticles\n\n\nCREATING THE PERFECT GPG KEYPAIR\n\n\nGenerating More Secure GPG Keys: A Step-by-Step Guide\n\n\nHow to use a GPG key for SSH authentication", 
            "title": "GPG"
        }, 
        {
            "location": "/tools/gpg/#check-the-version", 
            "text": "gpg --version", 
            "title": "Check the version"
        }, 
        {
            "location": "/tools/gpg/#generate-a-key", 
            "text": "gpg --gen-key", 
            "title": "Generate a key"
        }, 
        {
            "location": "/tools/gpg/#list-public-keys", 
            "text": "gpg -k\n# or \ngpg --list-keys\n# or\ngpg --list-keys --with-colons", 
            "title": "List public keys"
        }, 
        {
            "location": "/tools/gpg/#list-secret-keys", 
            "text": "gpg -K\n# or \ngpg --list-secret-keys", 
            "title": "List secret keys"
        }, 
        {
            "location": "/tools/gpg/#export-a-key-in-ascii-format", 
            "text": "gpg --export  key ID  | base64\n# e.g.:\ngpg --export bilbo@shire.vil | base64", 
            "title": "Export a key in ASCII format"
        }, 
        {
            "location": "/tools/gpg/#run-the-agent", 
            "text": "gpg-agent --daemon", 
            "title": "Run the agent"
        }, 
        {
            "location": "/tools/gpg/#kill-the-agent", 
            "text": "pkill gpg-agent", 
            "title": "Kill the agent"
        }, 
        {
            "location": "/tools/gpg/#encrypt-a-file", 
            "text": "gpg --recipient  key ID  --output  output file  --encrypt  input file \n# e.g.:\ngpg --recipient bilbo@shire.vil --output output.txt.gpg --encrypt input.txt", 
            "title": "Encrypt a file"
        }, 
        {
            "location": "/tools/gpg/#decrypt-a-file", 
            "text": "gpg --output  output file  --decrypt  input file \n# e.g.:\ngpg --output output.txt --decrypt input.txt.gpg", 
            "title": "Decrypt a file"
        }, 
        {
            "location": "/tools/gpg/#reference", 
            "text": "Project Page  Invoking GPG-AGENT  Unattended key generation    Rng-tools  Articles  CREATING THE PERFECT GPG KEYPAIR  Generating More Secure GPG Keys: A Step-by-Step Guide  How to use a GPG key for SSH authentication", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/homebrew/", 
            "text": "Homebrew\n\n\nHomebrew\n is an macOS package management system.\n\n\n\n\nNote\n\n\nGuide version: \n1.3.8\n\n\n\n\nCheck the version\n\n\nbrew --version\n\n\n\n\nFind a package\n\n\nbrew search \npackage name\n\n\n\n\n\nInstall a package\n\n\nbrew install \npackage name\n\n\n\n\n\nReference\n\n\n\n\nProject page\n\n\nHomebrew Cask\n\n\nSearch page", 
            "title": "Homebrew"
        }, 
        {
            "location": "/tools/homebrew/#homebrew", 
            "text": "Homebrew  is an macOS package management system.   Note  Guide version:  1.3.8", 
            "title": "Homebrew"
        }, 
        {
            "location": "/tools/homebrew/#check-the-version", 
            "text": "brew --version", 
            "title": "Check the version"
        }, 
        {
            "location": "/tools/homebrew/#find-a-package", 
            "text": "brew search  package name", 
            "title": "Find a package"
        }, 
        {
            "location": "/tools/homebrew/#install-a-package", 
            "text": "brew install  package name", 
            "title": "Install a package"
        }, 
        {
            "location": "/tools/homebrew/#reference", 
            "text": "Project page  Homebrew Cask  Search page", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/httpie/", 
            "text": "HTTPie\n\n\n\n\nCLI HTTP tool.\n\n\nhttps://httpie.org/doc#examples", 
            "title": "HTTPie"
        }, 
        {
            "location": "/tools/jq/", 
            "text": "jq\n\n\n\n\nCLI JSON manipulation tool.", 
            "title": "jq"
        }, 
        {
            "location": "/tools/keychain/", 
            "text": "Keychain\n is a SSH and GPG agent management system.\n\n\nStopping all agents\n\n\nkeychain -k all\n\n\n\n\nStopping agents started by keychain\n\n\nkeychain -k mine\n\n\n\n\nClearing Keys\n\n\nkeychain --clear\n\n\n\n\nReference\n\n\n\n\nProject Page\n\n\nArticles\n\n\nOpenSSH Key Management, Part 1\n\n\nOpenSSH Key Management, Part 2\n\n\nOpenSSH Key Management, Part 3", 
            "title": "Keychain"
        }, 
        {
            "location": "/tools/keychain/#stopping-all-agents", 
            "text": "keychain -k all", 
            "title": "Stopping all agents"
        }, 
        {
            "location": "/tools/keychain/#stopping-agents-started-by-keychain", 
            "text": "keychain -k mine", 
            "title": "Stopping agents started by keychain"
        }, 
        {
            "location": "/tools/keychain/#clearing-keys", 
            "text": "keychain --clear", 
            "title": "Clearing Keys"
        }, 
        {
            "location": "/tools/keychain/#reference", 
            "text": "Project Page  Articles  OpenSSH Key Management, Part 1  OpenSSH Key Management, Part 2  OpenSSH Key Management, Part 3", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/kong/", 
            "text": "Kong\n\n\n\n\nAPI proxy and management tool.\n\n\nhttps://getkong.org/", 
            "title": "Kong"
        }, 
        {
            "location": "/tools/make/", 
            "text": "Make\n is a build utility.\n\n\n\n\nNote\n\n\nGuide version: \n3.81\n\n\n\n\nCheck the version\n\n\nmake --version\n\n\n\n\nReference\n\n\n\n\nProject page", 
            "title": "Make"
        }, 
        {
            "location": "/tools/make/#check-the-version", 
            "text": "make --version", 
            "title": "Check the version"
        }, 
        {
            "location": "/tools/make/#reference", 
            "text": "Project page", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/mkdocs/", 
            "text": "http://www.mkdocs.org/\n\n\nhttps://mkdocs.readthedocs.io", 
            "title": "MkDocs"
        }, 
        {
            "location": "/tools/nexus/", 
            "text": "Nexus\n\n\n\n\nBinary repository tool.\n\n\nhttps://help.sonatype.com/display/NXRM3/REST+and+Integration+API", 
            "title": "Nexus"
        }, 
        {
            "location": "/tools/packer/", 
            "text": "Packer\n is a build automation tool that manages machine images.\n\n\n\n\nNote\n\n\nGuide version: \n1.1.2\n\n\n\n\nGet the version\n\n\npacker version\n\n\n\n\nBuild an image\n\n\npacker build -only=virtualbox-iso -var-file=centos7.json centos.json\n...\n...\n...\n==\n Builds finished. The artifacts of successful builds are:\n--\n virtualbox-iso: 'virtualbox' provider box: box/virtualbox/centos7-0.0.99.box\n\n\n\n\nReference\n\n\n\n\nProject page\n\n\nDocumentation\n\n\nCLI\n\n\n\n\n\n\n\n\n\n\nboxcutter/centos", 
            "title": "Packer"
        }, 
        {
            "location": "/tools/packer/#get-the-version", 
            "text": "packer version", 
            "title": "Get the version"
        }, 
        {
            "location": "/tools/packer/#build-an-image", 
            "text": "packer build -only=virtualbox-iso -var-file=centos7.json centos.json\n...\n...\n...\n==  Builds finished. The artifacts of successful builds are:\n--  virtualbox-iso: 'virtualbox' provider box: box/virtualbox/centos7-0.0.99.box", 
            "title": "Build an image"
        }, 
        {
            "location": "/tools/packer/#reference", 
            "text": "Project page  Documentation  CLI      boxcutter/centos", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/pass/", 
            "text": "Initialize\n\n\npass init \nuser ID\n\n# e.g.:\npass init bilbo@shire.vil\n\n\n\n\nAdd a value\n\n\npass insert \nname\n/\nname\n\n# e.g.:\npass insert vault/unseal-3\n# then enter the vaules\n\n\n\n\nReference\n\n\n\n\nProject page", 
            "title": "pass"
        }, 
        {
            "location": "/tools/pass/#initialize", 
            "text": "pass init  user ID \n# e.g.:\npass init bilbo@shire.vil", 
            "title": "Initialize"
        }, 
        {
            "location": "/tools/pass/#add-a-value", 
            "text": "pass insert  name / name \n# e.g.:\npass insert vault/unseal-3\n# then enter the vaules", 
            "title": "Add a value"
        }, 
        {
            "location": "/tools/pass/#reference", 
            "text": "Project page", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/prometheus/", 
            "text": "Prometheus\n\n\n\n\nMonitoring and visualization tool.\n\n\nhttps://prometheus.io", 
            "title": "Prometheus"
        }, 
        {
            "location": "/tools/ruby/", 
            "text": "Ruby\n\n\nhttps://www.ruby-lang.org", 
            "title": "Ruby"
        }, 
        {
            "location": "/tools/ruby/#ruby", 
            "text": "https://www.ruby-lang.org", 
            "title": "Ruby"
        }, 
        {
            "location": "/tools/ssh/", 
            "text": "OpenSSH\n secure remote connection utility.\n\n\n\n\nNote\n\n\nGuide version: \n7.4\n\n\n\n\nCheck the version\n\n\nssh -V\n\n\n\n\nAdd key pair cache\n\n\nssh-add ~/.ssh/id_rsa\n\n\n\n\nList private keys in cache\n\n\nssh-add -l\n\n\n\n\nList public keys in cache\n\n\nssh-add -L\n\n\n\n\nRun the agent\n\n\nssh-agent -s\n\n\n\n\nKill the agent\n\n\npkill ssh-agent\n\n\n\n\nReference\n\n\n\n\nProject page", 
            "title": "SSH"
        }, 
        {
            "location": "/tools/ssh/#check-the-version", 
            "text": "ssh -V", 
            "title": "Check the version"
        }, 
        {
            "location": "/tools/ssh/#add-key-pair-cache", 
            "text": "ssh-add ~/.ssh/id_rsa", 
            "title": "Add key pair cache"
        }, 
        {
            "location": "/tools/ssh/#list-private-keys-in-cache", 
            "text": "ssh-add -l", 
            "title": "List private keys in cache"
        }, 
        {
            "location": "/tools/ssh/#list-public-keys-in-cache", 
            "text": "ssh-add -L", 
            "title": "List public keys in cache"
        }, 
        {
            "location": "/tools/ssh/#run-the-agent", 
            "text": "ssh-agent -s", 
            "title": "Run the agent"
        }, 
        {
            "location": "/tools/ssh/#kill-the-agent", 
            "text": "pkill ssh-agent", 
            "title": "Kill the agent"
        }, 
        {
            "location": "/tools/ssh/#reference", 
            "text": "Project page", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/systemd/", 
            "text": "", 
            "title": "systemd"
        }, 
        {
            "location": "/tools/usershelld/", 
            "text": "UserShellD", 
            "title": "UserShellD"
        }, 
        {
            "location": "/tools/vagrant/", 
            "text": "Vagrant\n is a development automation tool.\n\n\n\n\nNote\n\n\nGuide version: \n2.0.1\n\n\n\n\nCheck the version\n\n\nvagrant version\n# or\nvagrant --version\n\n\n\n\nImport a box\n\n\nvagrant box add --name \nname\n \npath/to/box\n\n\n\n\n\nExample name:\n\n\n\n\nbi/eiab\n\n\n\n\nRemove a box\n\n\nvagrant box remove \nname\n\n\n\n\n\nExample name:\n\n\n\n\nbi/eiab\n\n\n\n\nList locally cached boxes\n\n\nvagrant box list\n\n\n\n\nStart a machine\n\n\nvagrant up\n# or\nvagrant up \nmachine name\n\n\n\n\n\nLog into a machine\n\n\nvagrant ssh\n# or\nvagrant ssh \nmachine name\n\n\n\n\n\nInstall plugin\n\n\nvagrant plugin install \nplugin name\n\n\n\n\n\nList available plugins\n\n\ngem list --remote vagrant-\n\n\n\n\nUpdate the host file\n\n\nvagrant hostmanager\n\n\n\n\nOr browse to the \nVagrant plugins wiki\n.\n\n\nReference\n\n\n\n\nProject Page\n\n\nPlugins\n\n\nvagrant-hostmanager plugin", 
            "title": "Vagrant"
        }, 
        {
            "location": "/tools/vagrant/#check-the-version", 
            "text": "vagrant version\n# or\nvagrant --version", 
            "title": "Check the version"
        }, 
        {
            "location": "/tools/vagrant/#import-a-box", 
            "text": "vagrant box add --name  name   path/to/box   Example name:   bi/eiab", 
            "title": "Import a box"
        }, 
        {
            "location": "/tools/vagrant/#remove-a-box", 
            "text": "vagrant box remove  name   Example name:   bi/eiab", 
            "title": "Remove a box"
        }, 
        {
            "location": "/tools/vagrant/#list-locally-cached-boxes", 
            "text": "vagrant box list", 
            "title": "List locally cached boxes"
        }, 
        {
            "location": "/tools/vagrant/#start-a-machine", 
            "text": "vagrant up\n# or\nvagrant up  machine name", 
            "title": "Start a machine"
        }, 
        {
            "location": "/tools/vagrant/#log-into-a-machine", 
            "text": "vagrant ssh\n# or\nvagrant ssh  machine name", 
            "title": "Log into a machine"
        }, 
        {
            "location": "/tools/vagrant/#install-plugin", 
            "text": "vagrant plugin install  plugin name", 
            "title": "Install plugin"
        }, 
        {
            "location": "/tools/vagrant/#list-available-plugins", 
            "text": "gem list --remote vagrant-", 
            "title": "List available plugins"
        }, 
        {
            "location": "/tools/vagrant/#update-the-host-file", 
            "text": "vagrant hostmanager  Or browse to the  Vagrant plugins wiki .", 
            "title": "Update the host file"
        }, 
        {
            "location": "/tools/vagrant/#reference", 
            "text": "Project Page  Plugins  vagrant-hostmanager plugin", 
            "title": "Reference"
        }, 
        {
            "location": "/tools/vault/", 
            "text": "Vault\n\n\n\n\nAPI credentials, encryption, storage, and management tool.\n\n\nhttps://www.vaultproject.io", 
            "title": "Vault"
        }, 
        {
            "location": "/tools/yum/", 
            "text": "Yellowdog Updater Modified\n (YUM) package management system.\n\n\nInstall a package\n\n\nyum install -y \npackage name\n\n\n\n\n\nList installed packages\n\n\nyum list installed\n\n\n\n\nList available packages\n\n\nyum list available\n\n\n\n\nReference\n\n\n\n\nProject Page", 
            "title": "YUM"
        }, 
        {
            "location": "/tools/yum/#install-a-package", 
            "text": "yum install -y  package name", 
            "title": "Install a package"
        }, 
        {
            "location": "/tools/yum/#list-installed-packages", 
            "text": "yum list installed", 
            "title": "List installed packages"
        }, 
        {
            "location": "/tools/yum/#list-available-packages", 
            "text": "yum list available", 
            "title": "List available packages"
        }, 
        {
            "location": "/tools/yum/#reference", 
            "text": "Project Page", 
            "title": "Reference"
        }, 
        {
            "location": "/about/", 
            "text": "", 
            "title": "About"
        }
    ]
}